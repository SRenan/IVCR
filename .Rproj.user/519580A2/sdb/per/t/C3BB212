{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(ggplot2)\n\n# FUNCTIONS\n\nreadfiles <- function(fileobj){\n  paths <- fileobj$datapath\n  samplenames <- fileobj$name\n  lfr <- lapply(paths, fread)\n  for(i in seq_along(samplenames)){\n    lfr[[i]][, sample := samplenames[i]]\n    lfr[[i]][, x := 1:2000]\n    lfr[[i]][, newx := seq(-100, 100, length.out = 500)]\n  }\n  seldata <- rbindlist(lfr)\n  setnames(seldata, \"V1\", \"y\")\n  return(seldata)\n}\nmakeTracePlot <- function(dat){\n  p <- ggplot(dat, aes(x = x, y = y)) + geom_line(aes(color = sample))\n  p <- p + xlab(\"mV\") + ylab(\"pA/pF\")\n  return(p)\n}\nfind0 <- function(dat){\n  #dups <- icepts[duplicated(Re(icepts))]\n  #real0 <- icepts[!Re(dups) == Re(icepts)] #We are losing a very small complex number \n  dat[which.min(abs(fitted)), newx]\n  real0 <- icepts[which.min(abs(Im(icepts)))]\n  real0 <- Re(real0)\n  return(real0)\n}\nmakeIVPlot <- function(dat){\n  p <- ggplot(dat, aes(x = newx, y = newy)) + geom_line(size = 1)\n  p <- p + geom_line(aes(x = newx, y = fitted), size = 1) + geom_vline(aes(xintercept = rev_p), color = \"red\")\n  sample <- unique(dat$sample)\n  p <- p + xlab(\"mV\") + ylab(\"pA/pF\") + ggtitle(sample)\n  return(p)\n}\n\n# #############################\n# \n# \n# quadm <- function(a, b, c){\n#   num <- -b - sqrt(b^2 - 4*a*c)\n#   return(num/(2*a))\n# }\n# \n# # ylabel: pA/pF\n# # xlabel: mV\n# \n# # How do they get a 0 on x axis?\n# # rescale the 1001 ; 1500 to -100 ; 100\n# scaledx <- seq(-100, 100, length.out = 500)\n# # Maybe an hline for y=0\n# \n# # divide y by the capacitance\n# # \n# # Shape is due to voltage variation and chemical gradient between the inside and outside of the cell\n# # outside the cell: High Ca conc, smaller current (pA)\n# capacitance <- c(2.45e-11, 2.3e-11,\n#                  1.8e-11, 1.57e-11,\n#                  1.57e-11, 1.49e-11,\n#                  1.49e-11, 2.584e-11, 1.03e-11)\n# \n# setwd(\"~/workspace/IVCR/081117/\")\n lf <- list.files(patter = \".asc\")\n lf <- grep(\"dvf\", lf, invert = T, value = T)\n lfr <- lapply(lf, fread)\n for(i in 1:length(lfr)){\n   lfr[[i]][, sample := lf[i]]\n   #lfr[[i]][, capacitance := capacitance[i]]\n   lfr[[i]][, x := 1:2000]\n   lfr[[i]] <- lfr[[i]][x >= 1000 & x < 1500]\n   lfr[[i]][ , newx := seq(-100, 100, length.out = 500)]\n }\n dat <- rbindlist(lfr)\n setnames(dat, \"V1\", \"y\")\n \n for(samp in lf){\n   sn <- gsub(\"\\\\..*\", \"\", samp)\n   png(filename = paste0(\"/media/srenan/1400-EC95/101117/plots/\", sn, \"_revp.png\"))\n   process_traces(dat[ sample == samp], plot = T)\n   dev.off()\n }\n# \n# p <- ggplot(dat, aes(x = x, y = y)) + geom_line(aes(color = sample))\n# p\n# \n# d11 <- dat[sample == \"TraceBuffer_12.asc\" & x > 1000 & x < 1500]\n# # p1 <- lm(y ~ poly(x, 3), data = d11)\n# # sp1 <- summary(p1)\n# # c1 <- sp1$coefficients[, 1]\n# p2 <- lm(y ~ x + I(x^2) + I(x^3), data = d11)\n# sp2 <- summary(p2)\n# c2 <- sp2$coefficients[, 1]\n# d11[, fit := c1[1] + x*c1[4] + c1[3]*x^2 + c1[2]*x^3]\n# d11[, fit := c1[1] + x*c1[2] + c1[3]*x^2 + c1[4]*x^3]\n# ## \n# d11[, fit := c2[1] + x*c2[2] + c2[3]*x^2 + c2[4]*x^3]\n# p <- ggplot(d11, aes(x = x, y = y)) + geom_line(aes(color = sample))+\n#   geom_line(aes(x=x, y  = fit))\n# p\n# \n# icepts <- polyroot(sp2$coefficients[1:4,1])\n# \n# p + geom_vline(xintercept = as.numeric(icepts))\n# \n# \n# # Fit linear model\n# # Generate fitted curves\n# # solve roots for 0\n# \n# fit_trace <- function(data, plot = T){\n#   subdat <- data[sample == tracename & x > 1000 & x < 1500]\n#   fitobj <- lm(y ~ x + I(x^2) + I(x^3), data = subdat)\n#   sry <- summary(fitobj)\n#   coefs <- sry$coefficients[,1]\n#   subdat[, fitted := coefs[1] + x*coefs[2] + x^2*coefs[3] + x^3*coefs[4]] #Fitted values for graph\n#   icepts <- polyroot(coefs[1:4])\n#   rev_p <- find0(icepts)\n#   print(paste(\"Reverse potential at\", rev_p))\n#   if(plot){\n#     p <- ggplot(subdat, aes(x = x, y = y)) + geom_line(aes(color = sample)) +\n#       geom_line(aes(x=x, y  = fitted))\n#     p <- p + geom_vline(xintercept = rev_p)\n#     print(p)\n#   }\n#   return(subdat) #temp\n# }\n# \n find0 <- function(icepts){\n   #dups <- icepts[duplicated(Re(icepts))]\n   #real0 <- icepts[!Re(dups) == Re(icepts)] #We are losing a very small complex number \n   real0 <- icepts[which.min(abs(Im(icepts)))]\n   real0 <- Re(real0)\n   return(real0)\n }\n \n# \n# ################################################################################\n# # FUNCTIONS\n# dat <- copy(dat2)\n# \n process_traces <- function(data, plot = T){\n   dat <- copy(data)\n   samples <- unique(dat$sample)\n   \n   #for(sample_i in seq_along(samples)){\n   for(sample_i in samples){\n     #fitobj <- lm(y ~ x + I(x^2) + I(x^3), data = dat[x > 1000 & x < 1500 & sample == sample_i])\n     fitobj <- lm(y ~ newx + I(newx^2) + I(newx^3), data = dat[sample == sample_i])\n     sry <- summary(fitobj)\n     coefs <- sry$coefficients[,1]\n     dat[sample == sample_i, i := coefs[1]]\n     dat[sample == sample_i, a := coefs[2]]\n     dat[sample == sample_i, b := coefs[3]]\n     dat[sample == sample_i, c := coefs[4]]\n     dat[sample == sample_i, fitted := i + newx*a + newx^2*b + newx^3*c]\n     icepts <- polyroot(coefs)\n     minyx <- dat[which.min(abs(fitted)), newx]\n     rev_p <- Re(icepts[which.min(abs(Re(minyx - icepts)))])\n     #dat[sample == sample_i, rev_p := find0(icepts)]\n     dat[sample == sample_i, rev_p := rev_p]\n   }\n   \n   \n   if(plot){\n     # p <- ggplot(dat[x > 1100 & x < 1400], aes(x = newx, y = y)) + geom_line(color = \"red\", size = 2)\n     # p <- p + geom_line(aes(x = newx, y = fitted)) + geom_vline(aes(xintercept = rev_p))\n     # p <- p + facet_wrap(~sample) \n     p <- ggplot(dat, aes(x = newx, y = y)) + geom_line(color=\"red\", size = 1.5) + \n       geom_line(aes(x = newx, y = fitted), size = 1.5) +#, alpha = 0.7) + \n       theme(panel.grid = element_blank()) + geom_vline(xintercept = 0) + \n       geom_hline(yintercept = 0)  + xlab(\"mV\") + ylab(\"pA/pF\")\n     p <-  p + geom_text(aes(x= min(newx), y = max(y),  label = paste(\"RP =\", round(rev_p,2))), hjust = 0, vjust = 0)\n     sample <- gsub(\"\\\\..*$\", \"\", unique(dat$sample))\n     p <- p + ggtitle(sample) + theme(plot.title = element_text(hjust = 0.5))\n     #p <- p + facet_wrap(~sample) \n     print(p)\n   }\n   \n   ret <- dat\n   return(ret)\n }\n \n\n \n",
    "created" : 1506464672533.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2382253514",
    "id" : "C3BB212",
    "lastKnownWriteTime" : 1508123377,
    "last_content_update" : 1508123377172,
    "path" : "~/Dropbox/IVCR/IVCR.R",
    "project_path" : "IVCR.R",
    "properties" : {
        "marks" : "<:152,35\n>:152,46"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}